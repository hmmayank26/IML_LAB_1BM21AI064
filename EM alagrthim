import numpy as np
from sklearn.mixture import GaussianMixture
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

def generate_data():
    np.random.seed(42)
    mean1 = [1, 1]
    cov1 = [[1, 0.5], [0.5, 1]]
    
    mean2 = [5, 5]
    cov2 = [[1, -0.5], [-0.5, 1]]
    
    data1 = np.random.multivariate_normal(mean1, cov1, 100)
    data2 = np.random.multivariate_normal(mean2, cov2, 100)
    
    data = np.vstack([data1, data2])
    np.random.shuffle(data)
    
    return data

def plot_ellipse(ax, mean, cov, color):
    v, w = np.linalg.eigh(cov)
    v = 2.0 * np.sqrt(2.0) * np.sqrt(v)
    u = w[0] / np.linalg.norm(w[0])
    angle = np.arctan(u[1] / u[0])
    angle = 180.0 * angle / np.pi
    ell = Ellipse(mean, v[0], v[1], 180.0 + angle, color=color)
    ax.add_patch(ell)

def em_algorithm(X, n_components, max_iter=100):
    gmm = GaussianMixture(n_components=n_components, max_iter=max_iter)
    gmm.fit(X)
    
    plt.scatter(X[:, 0], X[:, 1], c=gmm.predict(X), cmap='viridis', marker='.')
    
    for i in range(n_components):
        plot_ellipse(plt.gca(), gmm.means_[i], gmm.covariances_[i], 'red')
    
    plt.title('EM Algorithm - Gaussian Mixture Model')
    plt.show()

def main():
    data = generate_data()
    em_algorithm(data, n_components=2)

if __name__ == "__main__":
    main()
